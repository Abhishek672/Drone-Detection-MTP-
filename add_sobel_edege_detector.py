# -*- coding: utf-8 -*-
"""add_sobel_edege_detector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16tfSgQo6e4z420aO8lGDC5ckGjgMLKc1
"""

import numpy as np
from scipy import ndimage
from PIL import Image, ImageOps, ImageStat
import os
import glob
import shutil

def enhance_edges(source_directory, destination_directory):
  """
  enhance the edges of the images and store them in a separate folder with annotations.
  """
  def is_grayscale(path):
    """
    if an image has just 2 dimensions it will be classified as grayscale.
    """
    im = Image.open(path).size
    if len(im)==2:
      return True
    else:
      return False
      

  
  image_extensions = ['.tif', '.tiff', '.bmp', '.jpg', '.jpeg', '.gif', '.png', '.eps']

  #collect all images path in images_path = [] 
  images_path = []
  for ext in image_extensions:
    temp_path = os.path.join(source_directory,'*'+ext)
    images_path.extend(glob.glob(temp_path))

  #get the length of string source_directory
  length = len(source_directory)
  
  for i in range(len(images_path)):
    image_complete_path = images_path[i]
    image_name = image_complete_path[length+1:]

    #get the image
    im1 = Image.open(image_complete_path)

    is_gs = is_grayscale(image_complete_path)

    #applying grayscale method
    if is_gs == False:
      im2 = ImageOps.grayscale(im1)
    else:
      im2 = im1

    
    #convert to numpy array
    gray_im = np.array(im2)

    #apply sobel filter to grayscale image.
    gray_im = gray_im.astype('int32')
    dx = ndimage.sobel(gray_im,1)
    dy = ndimage.sobel(gray_im,0)
    add_grad = np.sqrt(dx**2+dy**2)
    add_grad = add_grad/np.max(add_grad)
    add_grad*=255.0

    #add the enhanced edges to the original image and store the final image
    if is_gs == False:
      enhanced_image = np.array(im1)+np.expand_dims(add_grad,axis=2)
    else:
      enhanced_image = np.array(im1)+add_grad

    #convert the float value of pixel to in32
    enhanced_image = enhanced_image.astype(np.uint8)

    #convert array back to image
    final_image = Image.fromarray(enhanced_image)

    #store the image to destination directory
    final_image.save(os.path.join(destination_directory,image_name))

  #copy all .txt annotations from the source_directory to destination_directory
  annotations_path = glob.glob(os.path.join(source_directory, '*.txt'))

  #here the destination folder path should end with a '/' (check if it is varying according to different OS)
  for annot in annotations_path:
    shutil.copy(annot, destination_directory+'/')

  return