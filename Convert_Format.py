# -*- coding: utf-8 -*-
"""Xml_To_Txt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KeBJXhdz45Y5dK8Mkjf3nOb_i0rU99XV
"""

import os
import glob
import xml.etree.ElementTree as ET
import shutil

def VOC_to_YOLO(path_to_original_directory, path_to_new_directory, label_dict):

  '''
  path_to_original_directory is the folder path e.g. /content/gdrive/MyDrive/Folder1
  where the original images and their .xml annotations are present.
  
  path_to_new_directory is the folder path e.g. /content/gdrive/MyDrive/Folder2
  where the original images and their .txt annotations are being saved.
  
  label_dict is a dictionary {'Drone':0} which contains the class names and their numerical
  values.
  
  If no xml file is present for an image then it will add a null annotation (empty .txt file)
  corresponding to it.
  '''

  image_paths = []
  annotation_paths = []
  exts = ['.tif', '.tiff', '.bmp', '.jpg', '.jpeg', '.gif', '.png', '.eps']

  #get paths of all images[] and their annotations and store them into image_paths = []
  for ext in exts:
    os_path = os.path.join(path_to_original_directory, '*'+ext)
    image_paths.extend(glob.glob(os_path))
  
  #get the .xml annotation path of each image and collect them in annotation_paths = []
  for i in range(len(image_paths)):
    im_path = image_paths[i]
    annotation_path = im_path[ : im_path.rfind('.')]+'.xml'
    annotation_paths.append(annotation_path)
  
  #convert the .xml to .txt annotation and store in a txt file for each image
  for image_idx in range(len(image_paths)):

    tree = ET.parse(annotation_paths[image_idx])
    root = tree.getroot()

    #get the image name, image width and image height
    image_name   =  root.find('filename').text
    image_width  =  int(root.find('size')[0].text)
    image_height =  int(root.find('size')[1].text)

    #used to store all bbox informations for given image
    bboxes_infos = []

    #iterate for each bounding box in image
    for member in root.findall('object'):

      class_name = member[0].text
      class_id = label_dict[class_name]

      xmin = int(member[4][0].text)
      ymin = int(member[4][1].text)
      xmax = int(member[4][2].text)
      ymax = int(member[4][3].text)

      #convert into .txt format for yolo
      x_c_r  = ((xmin + xmax)/2)/image_width
      y_c_r  = ((ymin + ymax)/2)/image_height
      bb_w_r = (xmax - xmin + 1)/image_width
      bb_h_r = (ymax - ymin + 1)/image_height

      bboxes_infos.append([class_id, x_c_r, y_c_r, bb_w_r, bb_h_r])

    #create the .txt file with same name as image and store the bbox info in that
    txt_file = image_name[ : image_name.rfind('.')] + '.txt'

    #first item is class_id which has to be non negative integer and remaining 4 items are floats.
    txt_path = os.path.join(path_to_new_directory, txt_file)
    with open(txt_path, 'w') as f:
      for bbox in bboxes_infos:
        for i in range(len(bbox)):
          item = bbox[i]
          if i==0:
            f.write("%d " %item)
          else:
            f.write("%f " % item)
        f.write("\n")


  #copy all images from the original directory to new directory 
  for ext in exts:
    temp = os.path.join(path_to_original_directory,'*'+ext)
    for f in glob.iglob(temp):
       shutil.copy(f, path_to_new_directory)
    
  return
