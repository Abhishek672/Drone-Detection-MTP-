# -*- coding: utf-8 -*-
"""rgb_to_YCbCr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_38EF6e2sgujrljZgp6Z6fAzgK6_97L2
"""

import numpy as np
from scipy import ndimage
from PIL import Image, ImageOps, ImageStat
import os
import glob
import shutil

def convert_YCbCr(source_directory, destination_directory, component):
  """
  select the component and stores the image representation in that component only.
  component = 0 implies the Y channel
  component = 1 implies the Cb channel
  component = 2 implies the cr channel
  """

  image_extensions = ['.tif', '.tiff', '.bmp', '.jpg', '.jpeg', '.gif', '.png', '.eps']

  #collect all images path in images_path = [] 
  images_path = []
  for ext in image_extensions:
    temp_path = os.path.join(source_directory,'*'+ext)
    images_path.extend(glob.glob(temp_path))

  #get the length of string source_directory
  length = len(source_directory)
  
  for i in range(len(images_path)):
    image_complete_path = images_path[i]
    image_name = image_complete_path[length+1:]

    #get the image and convert into YCbCr..
    im1 = Image.open(image_complete_path).convert('YCbCr')
    
    #convert to numpy array and get the desired component
    im1  = np.array(im1)[:,:,component]

    #convert array back to image
    final_image = Image.fromarray(im1)

    #store the image to destination directory
    final_image.save(os.path.join(destination_directory,image_name))

  #copy all .txt annotations from the source_directory to destination_directory
  annotations_path = glob.glob(os.path.join(source_directory, '*.txt'))

  for annot in annotations_path:
    shutil.copy(annot, os.path.join(destination_directory,''))

  return